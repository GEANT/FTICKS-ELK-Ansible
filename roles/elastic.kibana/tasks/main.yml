---
- include: setup-RedHat.yml
  when: ansible_os_family == 'RedHat'

- include: setup-Debian.yml
  when: ansible_os_family == 'Debian'

- name: Install Kibana.
  become: yes
  package:
    name: "{{ kibana_package }}"
    state: "{{ kibana_package_state }}"

- name: Ensure Kibana is started and enabled at boot.
  become: yes
  service:
    name: kibana
    state: "{{ kibana_service_state }}"
    enabled: "{{ kibana_service_enabled }}"

- name: Copy Kibana configuration.
  become: yes
  template:
    src: "{{ kibana_config_template }}"
    dest: "{{ kibana_config_file_path }}"
    owner: root
    group: root
    mode: 0644
  notify: restart kibana

- name: Install nginx.
  become: yes
  package:
    name: nginx
    state: present

- name: Create nginx dirs
  become: yes
  file: 
    path: /etc/nginx/ssl
    state: directory

- name: Generate self signed SSL certificates
  become: yes
  command: >
    openssl req
      -new
      -newkey rsa:4096
      -days 365
      -nodes
      -x509
      -subj "/CN={{ kibana_server_name }}"
      -keyout /etc/nginx/ssl/{{ kibana_server_name }}.key
      -out /etc/nginx/ssl/{{ kibana_server_name }}.pem
  args:
    creates: '/etc/nginx/ssl/{{ kibana_server_name }}.pem'
#  when: nginx_ssl_generate_self_signed_certs

- name: Create virtual hosts
  become: yes
  template:
    src: "{{ item }}.j2"
    dest: /etc/nginx/sites-available/{{ item }}
  with_items:
  - default
  - default-ssl
  - default-ssl-8443
  notify: restart nginx
   

- name: Enable virtual hosts
  become: yes
  file:
    src: /etc/nginx/sites-available/{{ item }}
    dest: /etc/nginx/sites-enabled/{{ item }}
    state: link
  with_items:
  - default
  - default-ssl
  - default-ssl-8443
  notify: restart nginx

- name: Start nginx
  become: yes
  service: name=nginx state=started

#- name: Copy certificates
#  become: yes
#  copy:
#    src:
#    dest:

- name: Create fticks public role
  uri: 
    url: http://localhost:5601/api/security/role/{{kibana_readonly_role}}
    method: PUT
    url_username: "{{ es_api_basic_auth_username }}"
    url_password: "{{ es_api_basic_auth_password }}"
    force_basic_auth: yes
    body_format: json
    headers:
      kbn-xsrf: "true"
    body: "{{ lookup('file','readonly_role.json') }}"
    status_code: 204

- name: Create fticks readonly space
  uri: 
    url: http://localhost:5601/api/spaces/space
    method: POST
    url_username: "{{ es_api_basic_auth_username }}"
    url_password: "{{ es_api_basic_auth_password }}"
    force_basic_auth: yes
    body_format: json
    headers:
      kbn-xsrf: "true"
    body: "{{ lookup('file','readonly_space.json') }}"
    status_code: [200,409]

- name: Create fticks readonly user
  uri: 
    url: http://{{ es_api_config_node }}:9200/_security/user/{{kibana_nginx_user}}
    method: PUT
    url_username: "{{ es_api_basic_auth_username }}"
    url_password: "{{ es_api_basic_auth_password }}"
    force_basic_auth: yes
    body_format: json
    body: "{{ lookup('template','readonly_user_user.json.j2') }}"

- name: Create fticks index template
  uri:
    url: http://{{ es_api_config_node }}:9200/_template/fticks_edugain
    method: PUT
    url_username: "{{ es_api_basic_auth_username }}"
    url_password: "{{ es_api_basic_auth_password }}"
    force_basic_auth: yes
    body_format: json
    body: "{{ lookup('file','fticks_edugain_template.json') }}"

- name: Copy import objects
  copy:
    src: "{{ item }}"
    dest: "{{ item }}"
  with_items:
  - fticks_edugain_indexpattern.ndjson
  - fticks_visualizations.ndjson  

- name: Create fticks index pattern and visualizations
  shell: "curl -XPOST -H 'kbn-xsrf: \"anything\"' -u {{ es_api_basic_auth_username }}:{{ es_api_basic_auth_password }} -F file=@{{ item }}  --write-out '%{http_code}' --silent --output /dev/null http://localhost:5601/s/{{ kibana_readonly_space }}/api/saved_objects/_import?overwrite=true"
  register: statusCode
  failed_when: statusCode.stdout|int != 200 
  with_items: 
  - fticks_edugain_indexpattern.ndjson
  - fticks_visualizations.ndjson
